{"version":3,"sources":["scripts/main.js"],"names":["heading","document","querySelector","tableBody","tableRows","querySelectorAll","sortFunction","toBeSorted","index","sorted","content","children","textContent","replace","sort","one","two","first","second","isNaN","append","addEventListener","eventX","indexOf","target"],"mappings":";AAAA,aAuCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EArCA,IAAMA,EAAUC,SAASC,cAAc,kBACjCC,EAAYF,SAASC,cAAc,eACnCE,EAAYD,EAAUE,iBAAiB,MAEvCC,EAAe,SAACC,EAAYC,GAC1BC,IAAAA,EAAaF,EAAAA,GACbG,EAAUD,EAAO,GAAGE,SAASH,GAAOI,YAAYC,QAAQ,MAAO,IAErD,KAAZH,GACFD,EAAOK,KAAK,SAACC,EAAKC,GACVC,IAAAA,EAAQF,EAAIJ,SAASH,GAAOI,YAC5BM,EAASF,EAAIL,SAASH,GAAOI,YAE/BK,OAAAA,EAAQC,EACH,EAGLD,EAAQC,GACF,EAGH,IAINC,MAAMT,IACTD,EAAOK,KAAK,SAACC,EAAKC,GAITC,OAHOF,EAAIJ,SAASH,GAAOI,YAAYC,QAAQ,MAAO,IAC9CG,EAAIL,SAASH,GAAOI,YAAYC,QAAQ,MAAO,MAMlEV,EAAUiB,OAAVjB,MAAAA,EAAoBM,EAAAA,KAGtBT,EAAQqB,iBAAiB,QAAS,SAACC,GAC3Bd,IAAAA,EAAQ,EAAIR,EAAQW,UAAUY,QAAQD,EAAOE,QAEnDlB,EAAaF,EAAWI","file":"main.e83009b0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst heading = document.querySelector('table thead tr');\r\nconst tableBody = document.querySelector('table tbody');\r\nconst tableRows = tableBody.querySelectorAll('tr');\r\n\r\nconst sortFunction = (toBeSorted, index) => {\r\n  const sorted = [...toBeSorted];\r\n  const content = sorted[0].children[index].textContent.replace(/\\D/g, '');\r\n\r\n  if (content === '') {\r\n    sorted.sort((one, two) => {\r\n      const first = one.children[index].textContent;\r\n      const second = two.children[index].textContent;\r\n\r\n      if (first > second) {\r\n        return 1;\r\n      };\r\n\r\n      if (first < second) {\r\n        return -1;\r\n      };\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  if (!isNaN(content)) {\r\n    sorted.sort((one, two) => {\r\n      const first = one.children[index].textContent.replace(/\\D/g, '');\r\n      const second = two.children[index].textContent.replace(/\\D/g, '');\r\n\r\n      return first - second;\r\n    });\r\n  };\r\n\r\n  tableBody.append(...sorted);\r\n};\r\n\r\nheading.addEventListener('click', (eventX) => {\r\n  const index = [...heading.children].indexOf(eventX.target);\r\n\r\n  sortFunction(tableRows, index);\r\n});\r\n"]}